{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\ranking\\\\App.js\";\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var loadAssets = function loadAssets() {\n    return _regeneratorRuntime.async(function loadAssets$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onFinish = function onFinish() {\n    return setIsReady(true);\n  };\n\n  return isReady ? null : React.createElement(AppLoading, {\n    startAsync: loadAssets,\n    onFinish: onFinish,\n    onError: function onError(e) {\n      return console.error(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/ranking/App.js"],"names":["React","useState","AppLoading","App","isReady","setIsReady","loadAssets","onFinish","e","console","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACCF,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,MACtBG,OADsB;AAAA,MACbC,UADa;;AAE5B,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMF,UAAU,CAAC,IAAD,CAAhB;AAAA,GAAjB;;AACA,SAAOD,OAAO,GAAG,IAAH,GACZ,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEE,UADd;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,aAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAAP;AAAA,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD","sourcesContent":["import React, { useState } from 'react';\nimport { AppLoading } from 'expo';\n\nexport default function App() {\n  const[isReady, setIsReady] = useState(false);\n  const loadAssets = async () => {};\n  const onFinish = () => setIsReady(true);\n  return isReady ? null :  (\n    <AppLoading \n      startAsync={loadAssets} \n      onFinish={onFinish} \n      onError={(e) => console.error(e)}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}