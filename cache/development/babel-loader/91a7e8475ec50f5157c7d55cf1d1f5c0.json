{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\ranking\\\\App.js\";\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Asset } from 'expo-asset';\n\nvar cacheImages = function cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync(\"\");\n    }\n  });\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var loadAssets = function loadAssets() {\n    var iamges;\n    return _regeneratorRuntime.async(function loadAssets$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            iamges = cacheImages([\"https://cdnnew.rankingball.com/img/lodding_on.png\"]);\n\n            require(\"/\");\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onFinish = function onFinish() {\n    return setIsReady(true);\n  };\n\n  return isReady ? React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, \"Ready!\") : React.createElement(AppLoading, {\n    startAsync: loadAssets,\n    onFinish: onFinish,\n    onError: console.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/ranking/App.js"],"names":["React","useState","AppLoading","Asset","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","App","isReady","setIsReady","loadAssets","iamges","require","onFinish","console","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,MAA3B;;;AAEA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD;AAAA,SAAYA,MAAM,CAACC,GAAP,CAAW,UAAAC,KAAK,EAAI;AAClD,QAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AAC3B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD,KAFD,MAEK;AACH,aAAOJ,KAAK,CAACO,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,CAAsC,EAAtC,CAAP;AACD;AACF,GAN+B,CAAZ;AAAA,CAApB;;AAQA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACCX,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,MACtBY,OADsB;AAAA,MACbC,UADa;;AAE5B,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,MADW,GACFZ,WAAW,CAAC,CAAC,mDAAD,CAAD,CADT;;AAEjBa,YAAAA,OAAO,CAAC,GAAD,CAAP;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAIA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMJ,UAAU,CAAC,IAAD,CAAhB;AAAA,GAAjB;;AACA,SAAOD,OAAO,GACZ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADY,GAGZ,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEE,UADd;AAEE,IAAA,QAAQ,EAAEG,QAFZ;AAGE,IAAA,OAAO,EAAEC,OAAO,CAACC,KAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AASD","sourcesContent":["import React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Text, Image } from 'react-native' ;\nimport { Asset } from 'expo-asset' ;\n\nconst cacheImages = (images) => images.map(image => {\n  if(typeof image === \"string\"){\n    return Image.prefetch(image)\n  }else{\n    return Asset.fromModule(image).downloadAsync(\"\");    \n  }\n})\n\nexport default function App() {\n  const[isReady, setIsReady] = useState(false);\n  const loadAssets = async () => {\n    const iamges = cacheImages([\"https://cdnnew.rankingball.com/img/lodding_on.png\"])\n    require(\"/\");\n  };\n  const onFinish = () => setIsReady(true);\n  return isReady ? (\n    <Text>Ready!</Text> \n  ) :  (\n    <AppLoading \n      startAsync={loadAssets} \n      onFinish={onFinish} \n      onError={console.error}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}